<%=: name | capitalize %> = require '../models/<%=: name %>'

# <%=: name | capitalize %> model's CRUD controller.
module.exports = 

  # Lists all <%=: name %>s
  index: (req, res) ->
    <%=: name | capitalize %>.find {"public": true}, (err, <%=: name %>s) ->
      res.send <%=: name %>s.map(publicize)
      
  # Creates new <%=: name %> with data from `req.body`
  create: (req, res) ->
    if req.user?
      userId = req.user._id
      <%=: name %> = new <%=: name | capitalize %> <%=: name | capitalize %>.editable req.body
      <%=: name %>.author = userId
      <%=: name %>.addAccess 'view:' + userId
      <%=: name %>.addAccess 'update:' + userId
      <%=: name %>.addAccess 'delete:' + userId
      <%=: name %>.save (err, <%=: name %>) ->
        unless err?
          res.send 201, <%=: name %>
        else res.send 500, err

  # Gets <%=: name %> by id
  get: (req, res) ->
    <%=: name | capitalize %>.findById req.params.id, (err, <%=: name %>) ->
      unless err?
        if <%=: name %>.public or <%=: name %>.access 'view:' + req.user._id
          res.send publicize(<%=: name %>)
        else res.send 404
      else res.send 500, err

  # Updates <%=: name %> with data from `req.body`
  update: (req, res) ->
    if req.user?
      isAllowed req.user._id, req.params.id, 'update', (err, allowed) ->
        if allowed
          <%=: name | capitalize %>.findByIdAndUpdate req.params.id, {"$set":<%=: name | capitalize %>.editable(req.body)}, (err, <%=: name %>) ->
            unless err?
              res.send publicize(<%=: name %>)
            else res.send 500, err
        else res.send 401, 'Unauthorized'
    else res.send 401, 'Login required'

  # Deletes <%=: name %> by id
  delete: (req, res) ->
    if req.user?
      isAllowed req.user._id, req.params.id, 'delete', (err, allowed) ->
        if allowed
          <%=: name | capitalize %>.findByIdAndRemove req.params.id, (err) ->
            unless err?
              res.send 200
            else res.send 500, err
        else res.send 401, 'Unauthorized'
    else res.send 401, 'Login required'

isAllowed = (objectId, userId, permission, next) ->
  <%=: name | capitalize %>.findById objectId, (err, object) ->
    return next err if err?
    return next null, true if object? and object.access permission + ':' + userId
    return next null, false

publicize = (object) ->
  object.publicView ? {}